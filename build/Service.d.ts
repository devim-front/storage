import { StrictService } from '@devim-front/service';
/**
 * Коллекция методов управления конкретного ключа из хранилища.
 */
declare type Field<T> = {
    /**
     * Возвращает текущее значение или undefined, если значения не существует.
     */
    get: () => T | undefined;
    /**
     * Задает новое значение или удаляет его, если в метод было передано
     * undefined.
     */
    set: (value: T | undefined) => void;
    /**
     * Возвращает true, если значение существует (не равно undefined).
     */
    has: () => boolean;
};
/**
 * Предоставляет механизм управления значениями, хранящимися в localStorage.
 * Если в проекте используется этот сервис, важно, чтобы все изменения в
 * localStorage были сделаны через него, так как в противном случае будет
 * происходить рассинхронизация между состоянием сервиса и хранилищем.
 */
export declare class Service extends StrictService {
    /**
     * Уникальный идентификатор проекта, использующего сервис.
     */
    private readonly id;
    /**
     * Создает экземпляр сервиса с указанным уникальным идентификатором.
     *
     * @param id Уникальный идентификатор проекта, используюшего этот сервис.
     * Так как несколько сайтов могут находиться на одном домене, то могут
     * возникать ситации, когда значения localStorage одного сайта перезаписывают
     * значения другого. Чтобы избежать этой ситуации, используется идентификатор.
     */
    constructor(id: string);
    /**
     * Возвращает коллекцию значений, считанную из localStorage.
     */
    private readValues;
    /**
     * Сериализует и записывает указанную коллекцию значений в localStorage.
     *
     * @param values Коллекция значений.
     */
    private saveValues;
    /**
     * Коллекция ключей, которые были изменены в текущем цикле выполнения
     * приложения. После сохранения значений в localStorage эта коллекция
     * должна быть очищена.
     */
    private changed;
    /**
     * Сохранённое значение свойства values.
     */
    private valuesCache;
    /**
     * Коллекция всех значений, содержащихся в сервисе, сгруппированная по их
     * ключам. Содержимое коллекции может отличаться от того, что находится
     * в localStorage, так что при записи значений в коллекцию следует
     * производить синхронизацию.
     */
    private get values();
    /**
     * Коллекция всех значений, содержащихся в сервисе, сгруппированная по их
     * ключам. Содержимое коллекции может отличаться от того, что находится
     * в localStorage, так что при записи значений в коллекцию следует
     * производить синхронизацию.
     */
    private set values(value);
    /**
     * Присваивает новое значение указанному ключу. Следует помнить, что для
     * оптимизации реальная запись в localStorage происходит не в текущем, а
     * следующем цикле выполнения приложения. Если после обновления значений
     * программа будет принудительно завершена, то изменения не сохранятся. Чтобы
     * избежать этого, используйте метод flush.
     *
     * @param key Ключ.
     * @param value Новое значение.
     */
    set(key: string, value: any): void;
    /**
     * Возвращает значение, соответствующее указанному ключу. Если данный ключ
     * не существует, будет возвращено undefined.
     *
     * @param key Ключ.
     */
    get(key: string): any;
    /**
     * Возвращает true, если значение по указанному ключу существует (не равно
     * undefined).
     *
     * @param key Кюч.
     */
    has(key: string): boolean;
    /**
     * Удаляет из сервиса все значения. Следует помнить, что для оптимизации
     * реальная запись в localStorage происходит не в текущем, а следующем
     * цикле выполнения приложения. Если после обновления значений программа
     * будет принудительно завершена, то изменения не сохранятся. Чтобы избежать
     * этого, используйте метод flush.
     */
    clear(): void;
    /**
     * Немедленно записывает значения из сервиса в localStorage. Служит для того,
     * чтобы избежать рассинхронизации localStorage и сервиса при принудительном
     * завершении программы.
     */
    flush(): void;
    /**
     * Производит принудительное добавление значений из localStorage в сервис.
     * Если в сервисе пристутствуют несохранённые изменения, то они не будут
     * удалены. Данный метод следует использовать лишь тогда, когда по какой-то
     * вы собираетесь повторно считать все значения из localStorage, но не хотите
     * терять текущие изменения в коллекции значений. При стандартном
     * использовании сервиса нужды в данном методе не возникает.
     */
    merge(): void;
    /**
     * Производит принудительную замену всех значений сервиса содержимым
     * localStorage. Все несохранённые изменения будет потеряны. При нормальном
     * использовании сервиса нужды в данном методе не возникает.
     */
    reset(): void;
    /**
     * Коллекция значений, созданных методом field.
     */
    private fields;
    /**
     * Возвращает коллекцию функций для управления значением с указанным ключом
     * (get, has и set). Все функции коллекции имеют закрепелённый контекст
     * выполнения.
     *
     * @template T Тип значения с указанным ключом.
     * @param key Ключ значения.
     */
    field<T = any>(key: string): Field<T>;
}
export {};
